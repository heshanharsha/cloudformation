AWSTemplateFormatVersion: '2010-09-09'
Description: Installing Cloudformation helper scripts in Ubuntu 20.04 LTS and install docker
########## Parameters ##########
Parameters:
  # KeyName:
  #   # Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
  #   # Type: AWS::EC2::KeyPair::KeyName
  PublicKey1:
    Description: Public key for server access
    Type: String
    Default: ""
  PublicKey2:
    Description: Public key for server access - Optional
    Type: String
    Default: ""
  PublicKey3:
    Description: Public key for server access - Optional
    Type: String
    Default: ""
  PublicKey4:
    Description: Public key for server access - Optional
    Type: String
    Default: ""
  PublicKey5:
    Description: Public key for server access - Optional
    Type: String
    Default: ""
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

########## Mappings ##########
Mappings:
  AWSRegionAMIEC2:
    us-east-1:
      Ubuntu20: ami-03d315ad33b9d49c4
    us-east-2:
      Ubuntu20: ami-0996d3051b72b5b2c
    us-west-2:
      Ubuntu20: ami-0928f4202481dfdf6
    us-west-1:
      Ubuntu20: ami-0ebef2838fb2605b7
    eu-west-1:
      Ubuntu20: ami-022e8cc8f0d3c52fd
    eu-central-1:
      Ubuntu20: ami-0932440befd74cdba
    ap-northeast-1:
      Ubuntu20: ami-0e039c7d64008bd84
    ap-southeast-1:
      Ubuntu20: ami-09a6a7e49bd29554b
    ap-southeast-2:
      Ubuntu20: ami-0d767dd04ac152743

########## Resources ##########
Resources:
  # Elastic IP
  # EIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     InstanceId: !Ref EC2Instance
  #     Tags:
  #       - Key: "Name"
  #         Value: "Testing docker server EIP" 
  #       - Key: "project"
  #         Value: "iot"
  #       - Key: "environment"
  #         Value: "dev"

  # Ec2 server with docker installed using cfn-init
  EC2Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT3M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ec2_bootstrapping:
          # - install_and_enable_cfn_hup
          # - install_docker_and_compose
          - enable_ssh_access_for_developer
        # install_and_enable_cfn_hup:
        #   files:
        #     "/etc/cfn/cfn-hup.conf":
        #       content:
        #         Fn::Join:
        #         - ''
        #         - - "[main]\n"
        #           - stack=
        #           - Ref: AWS::StackId
        #           - "\n"
        #           - region=
        #           - Ref: AWS::Region
        #           - "\n"
        #       mode: '000400'
        #       owner: root
        #       group: root
        #     "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
        #       content:
        #         Fn::Join:
        #         - ''
        #         - - "[cfn-auto-reloader-hook]\n"
        #           - 'triggers=post.update

        #             '
        #           - 'path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init

        #             '
        #           - 'action=/opt/aws/bin/cfn-init -v '
        #           - "         --stack "
        #           - Ref: AWS::StackName
        #           - "         --resource EC2Instance "
        #           - "         --configsets ec2_bootstrapping "
        #           - "         --region "
        #           - Ref: AWS::Region
        #           - "\n"
        #           - 'runas=root

        #             '
        #     "/lib/systemd/system/cfn-hup.service":
        #       content:
        #         Fn::Join:
        #         - ''
        #         - - "[Unit]\n"
        #           - "Description=cfn-hup daemon\n\n"
        #           - "[Service]\n"
        #           - 'Type=simple

        #             '
        #           - 'ExecStart=/opt/aws/bin/cfn-hup

        #             '
        #           - "Restart=always\n\n"
        #           - "[Install]\n"
        #           - WantedBy=multi-user.target
        #   commands:
        #     01enable_cfn_hup:
        #       command: systemctl enable cfn-hup.service
        #     02start_cfn_hup:
        #       command: systemctl start cfn-hup.service
        # install_docker_and_compose:
        #   commands:
        #     'a_update_existing_list_of_packages':
        #       command: 'sudo apt update'
        #     'b_ install_prerequisite_packages':
        #       command: 'sudo apt install -y apt-transport-https ca-certificates curl software-properties-common'
        #     'c_add_the_GPG_key':
        #       command: 'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -'
        #     'd_add_the_docker_repository_to_APT_sources':
        #       command: 'sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"'
        #     'e_install_docker':
        #       command: 'sudo apt install -y docker-ce'
        #     'f_install_docker_compose':
        #       command: 'sudo apt -y install docker-compose'
        #     'g_add_ubuntu_user_to_docker_group':
        #       command: 'sudo usermod -aG docker ubuntu'
        enable_ssh_access_for_developer:
          commands:
            'a_add_public_key1_to_the_server':
              command: !Sub 'echo ${PublicKey1} >> /home/ubuntu/.ssh/authorized_keys'
            'b_add_public_key2_to_the_server':
              command: !Sub 'echo ${PublicKey2} >> /home/ubuntu/.ssh/authorized_keys'
            'c_add_public_key3_to_the_server':
              command: !Sub 'echo ${PublicKey3} >> /home/ubuntu/.ssh/authorized_keys'
            'd_add_public_key4_to_the_server':
              command: !Sub 'echo ${PublicKey4} >> /home/ubuntu/.ssh/authorized_keys'
            'f_add_public_key5_to_the_server':
              command: !Sub 'echo ${PublicKey5} >> /home/ubuntu/.ssh/authorized_keys'
            'g_cahnge_file_permision':
              command: 'sudo chmod 600 /home/ubuntu/.ssh/authorized_keys'
            'h_cahnge_file_ownership':
              command: 'sudo chown ubuntu:ubuntu /home/ubuntu/.ssh/authorized_keys'
    Properties:
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      # KeyName:
      #   Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - AWSRegionAMIEC2
        - Ref: AWS::Region
        - Ubuntu20
      Tags:
        - Key: "Name"
          Value: "Testing docker server" 
        - Key: "project"
          Value: "iot"
        - Key: "environment"
          Value: "dev"
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -xe
          # Get the latest CloudFormation helper scripts
          apt-get update -y
          mkdir -p /opt/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
          # Start cfn-init
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance --configsets ec2_bootstrapping
          # cfn-init completed so signal success or not
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource EC2Instance

  # Security Group for ec2 server
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      Tags:
        - Key: "Name"
          Value: "Testing docker server SG" 
        - Key: "project"
          Value: "iot"
        - Key: "environment"
          Value: "dev"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation

########## Outputs ##########
Outputs:
  # Getting InstanceId
  InstanceId:
    Description: The instance ID of the server
    Value:
      !Ref EC2Instance
  # Getting Elastic IP address
  PublicIP:
    Description: Public IP address of the server
    Value:
      !GetAtt EC2Instance.PublicIp
